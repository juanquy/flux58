import os
import sys
import logging
import json
import uuid
from datetime import datetime
import shutil
from database import Database

# Project management class
class ProjectManager:
    def __init__(self, base_path='data'):
        self.projects_path = os.path.join(base_path, 'projects')
        self.exports_path = os.path.join(base_path, 'exports')
        
        # Ensure directories exist
        os.makedirs(self.projects_path, exist_ok=True)
        os.makedirs(self.exports_path, exist_ok=True)
        
        # Get the database instance from app.py if provided
        # First check module globals
        if 'db' in globals():
            self.db = db
        # Then check if this module has a db attribute (set from app.py)
        elif hasattr(sys.modules[__name__], 'db'):
            self.db = sys.modules[__name__].db
        # Otherwise raise an error - PostgreSQL connection is required
        else:
            raise ValueError("Database connection not provided to ProjectManager")
        
        print("ProjectManager using database: PostgreSQL")
    
    def create_project(self, user_id, project_name, description=""):
        """Create a new OpenShot project"""
        project_id = str(uuid.uuid4())
        
        # Create project directory
        project_dir = os.path.join(self.projects_path, project_id)
        os.makedirs(project_dir, exist_ok=True)
        
        # Create project in database
        project = self.db.create_project(project_id, user_id, project_name, description)
        
        if not project:
            # Clean up directory if database creation failed
            if os.path.exists(project_dir):
                shutil.rmtree(project_dir)
            return None
        
        # Create project file for OpenShot integration
        self._save_project_file(project_id, project)
        
        return project
    
    def get_project(self, project_id):
        """Get a project by ID"""
        # Get project from database
        project = self.db.get_project(project_id)
        
        if not project:
            return None
        
        # Ensure project file exists
        self._save_project_file(project_id, project)
        
        return project
    
    def update_project(self, project_id, name=None, description=None):
        """Update project data"""
        # Update in database
        success = self.db.update_project(project_id, name, description)
        
        if not success:
            return None
        
        # Get updated project
        project = self.db.get_project(project_id)
        
        if project:
            # Update project file
            self._save_project_file(project_id, project)
        
        return project
    
    def delete_project(self, project_id):
        """Delete a project"""
        # Delete from database
        success = self.db.delete_project(project_id)
        
        if not success:
            return False
        
        # Delete project directory
        project_dir = os.path.join(self.projects_path, project_id)
        if os.path.exists(project_dir):
            shutil.rmtree(project_dir)
        
        return True
    
    def list_user_projects(self, user_id):
        """List all projects for a user"""
        return self.db.list_user_projects(user_id)
    
    def add_asset(self, project_id, file_path, asset_type, name=None):
        """Add an asset to a project"""
        project = self.get_project(project_id)
        
        if not project:
            return None
        
        # Generate asset ID and filename
        asset_id = str(uuid.uuid4())
        filename = os.path.basename(file_path)
        
        if not name:
            name = filename
        
        # Copy file to project assets directory
        assets_dir = os.path.join(self.projects_path, project_id, "assets")
        os.makedirs(assets_dir, exist_ok=True)
        
        target_path = os.path.join(assets_dir, f"{asset_id}_{filename}")
        shutil.copy2(file_path, target_path)
        
        # Add asset to database
        asset = self.db.add_asset(asset_id, project_id, name, filename, target_path, asset_type)
        
        # Update project file
        if asset:
            project = self.get_project(project_id)
            self._save_project_file(project_id, project)
        
        return asset
    
    def add_clip_to_timeline(self, project_id, asset_id, track_id, position, duration):
        """Add a clip to the timeline"""
        project = self.get_project(project_id)
        
        if not project:
            return None
        
        # Find the asset
        asset = None
        for a in project["assets"]:
            if a["id"] == asset_id:
                asset = a
                break
        
        if not asset:
            return None
        
        # Find or create track
        track = None
        track_exists = False
        
        # Look for track in project
        for t in project["timeline"]["tracks"]:
            if t["id"] == track_id:
                track = t
                track_exists = True
                break
        
        # If track doesn't exist, create it
        if not track:
            track_name = f"Track {len(project['timeline']['tracks']) + 1}"
            track = self.db.add_track(track_id, project_id, track_name)
            
            if not track:
                return None
        
        # Create clip
        clip_id = str(uuid.uuid4())
        clip = self.db.add_clip(
            clip_id=clip_id,
            track_id=track_id,
            asset_id=asset_id,
            position=position,
            duration=duration
        )
        
        if clip:
            # Update project file
            project = self.get_project(project_id)
            self._save_project_file(project_id, project)
        
        return clip
    
    def _save_project_file(self, project_id, project_data):
        """Save project data to file"""
        project_dir = os.path.join(self.projects_path, project_id)
        os.makedirs(project_dir, exist_ok=True)
        
        project_file = os.path.join(project_dir, "project.json")
        
        # Create a clean copy of project data for OpenShot
        openshot_project = {
            "id": project_data["id"],
            "name": project_data["name"],
            "description": project_data.get("description", ""),
            "user_id": project_data["user_id"],
            "created_at": project_data["created_at"],
            "updated_at": project_data["updated_at"],
            "assets": [],
            "timeline": project_data.get("timeline", {
                "duration": 60,
                "width": 1920,
                "height": 1080,
                "fps": {
                    "num": 30,
                    "den": 1
                },
                "sample_rate": 48000,
                "channels": 2,
                "channel_layout": 3,
                "tracks": []
            })
        }
        
        # Process assets to make sure file paths are correct
        for asset in project_data.get("assets", []):
            asset_copy = dict(asset)
            
            # Ensure asset path is accessible to OpenShot
            if "path" in asset_copy and not os.path.exists(asset_copy["path"]):
                # Try to fix path if it's a relative path
                potential_path = os.path.join(project_dir, "assets", 
                                            f"{asset_copy['id']}_{asset_copy['filename']}")
                if os.path.exists(potential_path):
                    asset_copy["path"] = potential_path
            
            openshot_project["assets"].append(asset_copy)
        
        # Make sure all clips have reference to asset paths for export
        for track in openshot_project["timeline"].get("tracks", []):
            for clip in track.get("clips", []):
                # Find associated asset for this clip
                asset_id = clip.get("asset_id")
                if asset_id:
                    for asset in openshot_project["assets"]:
                        if asset["id"] == asset_id:
                            clip["asset_path"] = asset["path"]
                            break
        
        # Save to file
        with open(project_file, 'w') as f:
            json.dump(openshot_project, f, indent=2)